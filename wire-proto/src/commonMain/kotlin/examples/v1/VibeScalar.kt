// Code generated by Wire protocol buffer compiler, do not edit.
// Source: examples.v1.VibeScalar in examples/v1/example.proto
package examples.v1

import kotlin.Any
import kotlin.Boolean
import kotlin.ByteArray
import kotlin.Double
import kotlin.Float
import kotlin.Int
import kotlin.Long
import kotlin.collections.List
import kotlinx.serialization.Serializable

/**
 * The vibe scalar
 */
@Serializable
public data class VibeScalar(
  /**
   * The details of the vibe double
   */
  public val vibeDouble: Double = 0.0,
  /**
   * the details of the vibe float
   */
  public val vibeFloat: Float = 0f,
  /**
   * The details of the vibe int32
   */
  public val vibeInt32: Int = 0,
  /**
   * The details of the vibe int64
   */
  public val vibeInt64: Long = 0L,
  /**
   * The details of the vibe uint32
   */
  public val vibeUint32: Int? = null,
  /**
   * The details of the vibe uint64
   */
  public val vibeUint64: Long = 0L,
  /**
   * The details of the vibe sint32
   */
  public val vibeSint32: Int = 0,
  /**
   * The details of the vibe sint64
   */
  public val vibeSint64: Long = 0L,
  /**
   * The details of the vibe fixed32
   */
  public val vibeFixed32: Int = 0,
  /**
   * The details of the vibe fixed64
   */
  public val vibeFixed64: Long = 0L,
  /**
   * The details of the vibe sfixed32
   */
  public val vibeSfixed32: Int = 0,
  /**
   * The details of the vibe sfixed64
   */
  public val vibeSfixed64: Long = 0L,
  /**
   * The details of the vibe bool
   */
  public val vibeBool: Boolean = false,
  /**
   * the details of the vibe bytes
   */
  public val vibeBytes: ByteArray = ByteArray(0),
  /**
   * The details of the vibe string
   */
  public val vibeEnum: List<VibeEnum> = emptyList(),
) {
  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is VibeScalar) return false
    if (vibeDouble != other.vibeDouble) return false
    if (vibeFloat != other.vibeFloat) return false
    if (vibeInt32 != other.vibeInt32) return false
    if (vibeInt64 != other.vibeInt64) return false
    if (vibeUint32 != other.vibeUint32) return false
    if (vibeUint64 != other.vibeUint64) return false
    if (vibeSint32 != other.vibeSint32) return false
    if (vibeSint64 != other.vibeSint64) return false
    if (vibeFixed32 != other.vibeFixed32) return false
    if (vibeFixed64 != other.vibeFixed64) return false
    if (vibeSfixed32 != other.vibeSfixed32) return false
    if (vibeSfixed64 != other.vibeSfixed64) return false
    if (vibeBool != other.vibeBool) return false
    if (vibeBytes != other.vibeBytes) return false
    if (vibeEnum != other.vibeEnum) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode()
    if (result == 0) {
      result = result * 37 + vibeDouble.hashCode()
      result = result * 37 + vibeFloat.hashCode()
      result = result * 37 + vibeInt32.hashCode()
      result = result * 37 + vibeInt64.hashCode()
      result = result * 37 + (vibeUint32?.hashCode() ?: 0)
      result = result * 37 + vibeUint64.hashCode()
      result = result * 37 + vibeSint32.hashCode()
      result = result * 37 + vibeSint64.hashCode()
      result = result * 37 + vibeFixed32.hashCode()
      result = result * 37 + vibeFixed64.hashCode()
      result = result * 37 + vibeSfixed32.hashCode()
      result = result * 37 + vibeSfixed64.hashCode()
      result = result * 37 + vibeBool.hashCode()
      result = result * 37 + vibeBytes.hashCode()
      result = result * 37 + vibeEnum.hashCode()
    }
    return result
  }

  /**
   * The details of the vibe string
   */
  @Serializable
  public enum class VibeEnum {
    VIBE_UNSET,
    VIBE_GOOD,
  }
}
