// Code generated by Wire protocol buffer compiler, do not edit.
// Source: examples.v1.VibeArray in examples/v1/example.proto
package examples.v1

import kotlin.Any
import kotlin.Boolean
import kotlin.ByteArray
import kotlin.Double
import kotlin.Float
import kotlin.Int
import kotlin.Long
import kotlin.collections.List
import kotlinx.serialization.Serializable

/**
 * The vibe array message
 */
@Serializable
public data class VibeArray(
  /**
   * The details of the vibe double array
   */
  public val vibeDoubles: List<Double> = emptyList(),
  /**
   * the details of the vibe float array
   */
  public val vibeFloats: List<Float> = emptyList(),
  /**
   * The details of the vibe int32 array
   */
  public val vibeInt32s: List<Int> = emptyList(),
  /**
   * The details of the vibe int64 array
   */
  public val vibeInt64s: List<Long> = emptyList(),
  /**
   * The details of the vibe uint32 array
   */
  public val vibeUint32s: List<Int> = emptyList(),
  /**
   * The details of the vibe uint64 array
   */
  public val vibeUint64s: List<Long> = emptyList(),
  /**
   * The details of the vibe sint32 array
   */
  public val vibeSint32s: List<Int> = emptyList(),
  /**
   * The details of the vibe sint64 array
   */
  public val vibeSint64s: List<Long> = emptyList(),
  /**
   * The details of the vibe fixed32 array
   */
  public val vibeFixed32s: List<Int> = emptyList(),
  /**
   * The details of the vibe fixed64 array
   */
  public val vibeFixed64s: List<Long> = emptyList(),
  /**
   * The details of the vibe sfixed32 array
   */
  public val vibeSfixed32s: List<Int> = emptyList(),
  /**
   * The details of the vibe sfixed64 array
   */
  public val vibeSfixed64s: List<Long> = emptyList(),
  /**
   * The details of the vibe bool array
   */
  public val vibeBools: List<Boolean> = emptyList(),
  /**
   * the details of the vibe bytes array
   */
  public val vibeByteses: List<ByteArray> = emptyList(),
) {
  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is VibeArray) return false
    if (vibeDoubles != other.vibeDoubles) return false
    if (vibeFloats != other.vibeFloats) return false
    if (vibeInt32s != other.vibeInt32s) return false
    if (vibeInt64s != other.vibeInt64s) return false
    if (vibeUint32s != other.vibeUint32s) return false
    if (vibeUint64s != other.vibeUint64s) return false
    if (vibeSint32s != other.vibeSint32s) return false
    if (vibeSint64s != other.vibeSint64s) return false
    if (vibeFixed32s != other.vibeFixed32s) return false
    if (vibeFixed64s != other.vibeFixed64s) return false
    if (vibeSfixed32s != other.vibeSfixed32s) return false
    if (vibeSfixed64s != other.vibeSfixed64s) return false
    if (vibeBools != other.vibeBools) return false
    if (vibeByteses != other.vibeByteses) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode()
    if (result == 0) {
      result = result * 37 + vibeDoubles.hashCode()
      result = result * 37 + vibeFloats.hashCode()
      result = result * 37 + vibeInt32s.hashCode()
      result = result * 37 + vibeInt64s.hashCode()
      result = result * 37 + vibeUint32s.hashCode()
      result = result * 37 + vibeUint64s.hashCode()
      result = result * 37 + vibeSint32s.hashCode()
      result = result * 37 + vibeSint64s.hashCode()
      result = result * 37 + vibeFixed32s.hashCode()
      result = result * 37 + vibeFixed64s.hashCode()
      result = result * 37 + vibeSfixed32s.hashCode()
      result = result * 37 + vibeSfixed64s.hashCode()
      result = result * 37 + vibeBools.hashCode()
      result = result * 37 + vibeByteses.hashCode()
    }
    return result
  }
}
